{"version":3,"sources":["components/About.js","components/Navbar.js","components/Alert.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setbtntext","className","style","id","type","class","onClick","border","Navbar","props","mode","href","title","toggleMode","role","htmlFor","alert","msg","Textform","text","setText","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","App","setAlert","message","setMode","document","body","Alert","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAEe,SAASA,IACpB,MAA4BC,mBAAS,CAEjCC,MAAO,QACPC,gBAAiB,UAHrB,mBAAMC,EAAN,KAAeC,EAAf,KAOA,EAA8BJ,mBAAS,qBAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAoBF,OACE,mCACE,sBAAKC,UAAU,YAAaC,MAAOL,EAAnC,UACI,oBAAI,UAAJ,sBACF,sBAAKI,UAAU,YAAYE,GAAG,mBAAmBD,MAAOL,EAAxD,UACE,sBAAKI,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBE,GAAG,aAApC,SACE,wBACEF,UAAU,mBACVG,KAAK,SACL,iBAAe,WACf,iBAAe,eACf,gBAAc,OACd,gBAAc,cACdF,MAAOL,EAPT,iCAYF,qBACEM,GAAG,cACHF,UAAU,mCACV,kBAAgB,aAChB,iBAAe,oBAJjB,SAME,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAvC,UACE,8EADF,4WAOwC,IACtC,mDARF,uDAaJ,sBAAKI,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBE,GAAG,aAApC,SACE,wBACEF,UAAU,6BACVG,KAAK,SACL,iBAAe,WACf,iBAAe,eACf,gBAAc,QACd,gBAAc,cACdF,MAAOL,EAPT,iCAYF,qBACEM,GAAG,cACHF,UAAU,8BACV,kBAAgB,aAChB,iBAAe,oBAJjB,SAME,sBAAKA,UAAU,iBAAgBC,MAAOL,EAAtC,UACE,+EADF,6WAOoD,IAClD,mDARF,uDAaJ,sBAAKI,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBE,GAAG,eAApC,SACE,wBACEF,UAAU,6BACVG,KAAK,SACL,iBAAe,WACf,iBAAe,iBACf,gBAAc,QACd,gBAAc,gBACdF,MAAOL,EAPT,iCAYF,qBACEM,GAAG,gBACHF,UAAU,8BACV,kBAAgB,eAChB,iBAAe,oBAJjB,SAME,sBAAKA,UAAU,iBAAgBC,MAAOL,EAAtC,UACE,8EADF,6WAOoD,IAClD,mDARF,0DAcN,qBAAKI,UAAU,iBAAf,SACA,wBAAQG,KAAK,SAASC,MAAM,eAAeC,QA7H3B,WACK,UAAlBT,EAAQF,OACPG,EAAW,CACTH,MAAO,QACPC,gBAAiB,QACjBW,OAAQ,oBAEVP,EAAW,uBAIXF,EAAW,CACTH,MAAO,QACPC,gBAAiB,UAGvBI,EAAW,sBA6GX,SAAkED,WCtI3D,SAASS,EAAOC,GAC3B,OACI,qBAAKR,UAAS,yCAAoCQ,EAAMC,KAA1C,eAAqDD,EAAMC,MAAzE,SACJ,sBAAKT,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeU,KAAK,IAAjC,SAAsCF,EAAMG,QAC5C,wBAAQX,UAAU,iBAAiBG,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMH,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BE,GAAG,yBAA7C,UACE,qBAAIF,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOU,KAAK,IAAxD,oBAEF,oBAAIV,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOU,KAAK,SAAxD,yBAGJ,sBAAKV,UAAS,sCAA8C,UAAbQ,EAAMC,KAAe,OAAO,SAA3E,UACN,uBAAOT,UAAU,mBAAmBK,QAASG,EAAMI,WAAYT,KAAK,WAAWU,KAAK,SAASX,GAAG,2BAChG,uBAAOF,UAAU,mBAAmBc,QAAQ,yBAA5C,yCCNaC,MAbf,SAAeP,GAEX,OAEGA,EAAMO,OAAS,sBAAKf,UAAS,sBAAiBQ,EAAMO,MAAMZ,KAA7B,gCAAiEU,KAAK,QAApF,UAEpB,iCAASL,EAAMO,MAAMZ,OAFD,KAEkBK,EAAMO,MAAMC,QCNrC,SAASC,EAAST,GAC/B,MAAwBf,mBAAS,QAAjC,mBAAOyB,EAAP,KAAaC,EAAb,KAmBA,OACE,qCACA,sBAAKnB,UAAU,YAAaC,MAAO,CAACP,MAAoB,SAAbc,EAAMC,KAAc,QAAQ,SAAvE,UACE,+BAAKD,EAAMY,QAAX,OACA,qBAAKpB,UAAU,OAAf,SACE,0BACEA,UAAU,eACVC,MAAO,CAACN,gBAA8B,SAAba,EAAMC,KAAc,OAAO,QAASf,MAAoB,SAAbc,EAAMC,KAAc,QAAQ,SAChGP,GAAG,QACHmB,MAAOH,EACPI,SAfgB,SAACC,GACvBC,QAAQC,IAAI,aACZN,EAAQI,EAAMG,OAAOL,QAcfM,KAAK,QAGT,wBAAQxB,KAAK,SAASH,UAAU,eAAeK,QA/B9B,WACnBmB,QAAQC,IAAI,wBAA0BP,GACtC,IAAIU,EAAUV,EAAKW,cACnBV,EAAQS,GACRpB,EAAMsB,UAAU,4BAA6B,YA2B3C,kCAGA,wBAAQ3B,KAAK,SAASH,UAAU,oBAAoBK,QA5BhC,WACtBmB,QAAQC,IAAI,wBAA0BP,GACtC,IAAIU,EAAUV,EAAKa,cACnBZ,EAAQS,GACRpB,EAAMsB,UAAU,4BAA6B,YAwB3C,qCAIA,sBAAK9B,UAAU,iBAAiBC,MAAO,CAACP,MAAoB,SAAbc,EAAMC,KAAc,QAAQ,SAA3E,UACI,mDACA,8BAAIS,EAAKc,MAAM,KAAKC,OAApB,aAAsCf,EAAKe,OAA3C,gBACA,8BAAI,KAAOf,EAAKc,MAAM,KAAKC,OAA3B,kBACA,yCACA,4BAAIf,U,mBCWCgB,MA3Cf,WACE,MAA0BzC,mBAAS,MAAnC,mBAAOsB,EAAP,KAAcoB,EAAd,KACML,EAAW,SAACM,EAASjC,GACzBgC,EACE,CACEnB,IAAKoB,EACLjC,KAAMA,KAIb,EAAwBV,mBAAS,SAAjC,mBAAOgB,EAAP,KAAa4B,EAAb,KAaC,OACE,qCACE,cAAC9B,EAAD,CAAQI,MAAM,YAAYF,KAAMA,EAAMG,WAdxB,WACL,UAATH,GACF4B,EAAQ,QACRC,SAASC,KAAKtC,MAAMN,gBAAkB,OACtCmC,EAAU,2BAA4B,aAGtCO,EAAQ,SACRC,SAASC,KAAKtC,MAAMN,gBAAkB,QACtCmC,EAAU,4BAA6B,eAMrC,cAACU,EAAD,CAAOzB,MAAOA,IACd,cAAC,IAAD,UACA,qBAAKf,UAAU,YAAf,SACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,SAAlB,SACE,cAAClD,EAAD,MAEF,cAAC,IAAD,CAAOiD,OAAK,EAAEC,KAAK,IAAnB,SACA,cAACzB,EAAD,CAAWa,UAAWA,EAAWV,QAAQ,4BAA4BX,KAAMA,iBCtCtEkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASiB,eAAe,SAM1BZ,M","file":"static/js/main.751df8c1.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport default function About() {\r\n    const[myStyle, setMyStyle]= useState({\r\n        \r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n        \r\n\r\n    })\r\n    const [btntext, setbtntext] = useState(\"Enable LIGHT Mode\")\r\n    const toggleStyle = ()=>{\r\n        if(myStyle.color === 'black'){\r\n            setMyStyle({\r\n              color: 'white',\r\n              backgroundColor: 'black',\r\n              border: '2px solid white'\r\n            })\r\n            setbtntext(\"Enable Light Mode\")\r\n        }\r\n        \r\n        else{\r\n            setMyStyle({\r\n              color: 'black',\r\n              backgroundColor: 'white'\r\n            })\r\n        \r\n        setbtntext(\"Enable Dark Mode\");\r\n      }\r\n    }\r\n  return (\r\n    <>\r\n      <div className=\"container\"  style={myStyle}>\r\n          <h1 my-3>About us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classes that we use to style each element. These classes control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\"style={myStyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\"style={myStyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container my-4\">\r\n        <button type=\"button\" class=\"btn btn-dark\" onClick={toggleStyle}>{btntext}</button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/about\">About </a>\r\n          </li>\r\n        </ul>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark MODE</label>\r\n</div >\r\n      </div>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction alert(props) {\r\n    \r\n    return (\r\n       \r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          \r\n  <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n  \r\n</div>\r\n\r\n    )\r\n}\r\n\r\nexport default alert\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const [text, setText] = useState(\"text\");\r\n\r\n  const handle_click = () => {\r\n    console.log(\"Uppercase was Clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted into Uppercase!\", \"success\");\r\n  }\r\n  const handle_lo_click = () => {\r\n    console.log(\"Uppercase was Clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted into Lowercase!\", \"success\");\r\n  }\r\n  const handelOn_Change = (event) => {\r\n    console.log(\"on change\");\r\n    setText(event.target.value);\r\n    \r\n  };\r\n  return (\r\n    <>\r\n    <div className=\"container\"  style={{color: props.mode==='dark'?'white':'black'}}>\r\n      <h1>{props.heading} </h1>\r\n      <div className=\"mb-3\">\r\n        <textarea\r\n          className=\"form-control\"\r\n          style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}}\r\n          id=\"myBox\"\r\n          value={text}\r\n          onChange={handelOn_Change}\r\n          rows=\"9\"\r\n        ></textarea>\r\n      </div>\r\n      <button type=\"button\" className=\"btn btn-dark\" onClick={handle_click}>\r\n        Convert to uppercase\r\n      </button>\r\n      <button type=\"button\" className=\"btn btn-dark mx-3\" onClick={handle_lo_click}>\r\n        Convert to lowercase\r\n      </button>\r\n      </div>\r\n      <div className=\"container my-4\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n          <h1>Your text summary</h1>\r\n          <p>{text.split(\" \").length}words and {text.length} character</p>\r\n          <p>{0.008* text.split(\" \").length}Minutes read</p>\r\n          <h2>Preview</h2>\r\n          <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n","// import logo from './logo.svg';\n// import React from \"react\";\nimport React, { useState } from 'react';\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Alert from \"./components/Alert\";\nimport Textform from \"./components/Textform\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  \n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [alert, setAlert] = useState(null)\n  const showAlert= (message, type)=>{\n    setAlert(\n      {\n        msg: message,\n        type: type\n      }\n    )\n  }\n const [mode, setMode] = useState('light');\n const toggleMode = ()=>{\n   if(mode === 'light'){\n    setMode('dark');\n    document.body.style.backgroundColor = 'grey';\n    showAlert(\"Dark Mode has ben enable\", \"Success\")\n  }\n  else{\n    setMode('light');\n    document.body.style.backgroundColor = 'white';\n    showAlert(\"Light Mode has ben enable\", \"Success\")\n  }\n }\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <Router>\n      <div className=\"container\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact  path=\"/\">\n          <Textform  showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}